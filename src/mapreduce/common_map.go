package mapreduce

import (
	"hash/fnv"
	"io/ioutil"
	"log"
	"os"
	//"io"
	"encoding/json"
	//"fmt"
)

func format(key string,value string) KeyValue{
	return KeyValue{key,value}
}

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	// 
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).

	file,err := ioutil.ReadFile(inFile)
	if err!=nil{
		log.Fatal("doMap(): ",err)
	} 
	//注意make的只能用赋值
	//使用var []type 的可以使用append
	outputFiles := make([]*os.File,nReduce)
	//保存输出文件名
	for i:=0; i<nReduce; i++{
		fileName := reduceName(jobName,mapTask,i)
		outputFile,err:= os.Create(fileName)   //返回*os.File
		if err!=nil{
			log.Fatal("doMap() os.Create : ",err)
		}
		outputFiles[i] = outputFile
		//outputFiles = append(outputFiles,outputFile)
		//fmt.Println(outputFiles)

	} 

	//写不进去文件

	pairs :=mapF(inFile,string(file))
	//为pair选择输出文件
	for _ , kv := range pairs{
		index := ihash(kv.Key)%nReduce
		enc :=json.NewEncoder(outputFiles[index])
		enc.Encode(kv)
		if err!=nil{
			log.Fatal("doMap() Encode: ",err)
		}
	}

	for i:=0; i<nReduce; i++{
		outputFiles[i].Close()
	}
	
/*
	//呵呵一开始不会写
	fp,err = os.OpenFile("mrtmp.test-0-0", os.O_RDWR|os.O_CREATE, 0755)
	enc=json.NewEncoder(fp)
	for i , _ := range pairs{
		//r := ihash(pairs[i].Key)%nReduce
		//reduceFileName := reduceName(jobName,mapTask,r)
		
		//if err==nil&&i==0 {
			//fp,_ = os.Create(reduceFileName)
	    	//enc=json.NewEncoder(fp)
	    //}
		//输出pair到中间文件
		//fmt.Println(pairs[i])
		
		err = enc.Encode(pairs[i])
		//
	}
	fp.Close()
*/

}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
